{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","components/Toast.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setFilter","showToast","isEmpty","text","trim","value","onChange","e","target","type","className","onClick","preventDefault","completed","id","Date","now","toString","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","Toast","toast","visibility","message","App","useState","setFilteredTodos","duration","setToast","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","localTodos","parse","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2c1b711f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({\r\n\tinputText,\r\n\tsetInputText,\r\n\ttodos,\r\n\tsetTodos,\r\n\tsetFilter,\r\n\tshowToast,\r\n}) => {\r\n\tconst inputTextHandler = (e) => {\r\n\t\tsetInputText(e.target.value);\r\n\t};\r\n\tconst submitHandler = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (isEmpty(inputText) /*inputText === ''*/) {\r\n\t\t\tshowToast('El texto está vacío', 1400);\r\n\t\t} else {\r\n\t\t\tsetTodos([\r\n\t\t\t\t...todos,\r\n\t\t\t\t{ text: inputText, completed: false, id: Date.now().toString() },\r\n\t\t\t]);\r\n\t\t\tsetInputText('');\r\n\t\t}\r\n\t};\r\n\tconst filterHandler = (e) => {\r\n\t\tsetFilter(e.target.value);\r\n\t};\r\n\tconst isEmpty = (text) => {\r\n\t\treturn !text || !text.trim();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form>\r\n\t\t\t<input\r\n\t\t\t\tvalue={inputText}\r\n\t\t\t\tonChange={inputTextHandler}\r\n\t\t\t\ttype='text'\r\n\t\t\t\tclassName='todo-input'\r\n\t\t\t/>\r\n\t\t\t<button onClick={submitHandler} className='todo-button' type='submit'>\r\n\t\t\t\t<i className='fas fa-plus-square'></i>\r\n\t\t\t</button>\r\n\t\t\t<div className='select'>\r\n\t\t\t\t<select onChange={filterHandler} name='todos' className='filter-todo'>\r\n\t\t\t\t\t<option value='all'>Todas</option>\r\n\t\t\t\t\t<option value='completed'>Completadas</option>\r\n\t\t\t\t\t<option value='uncompleted'>Pendientes</option>\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Todo = ({ todo, todos, setTodos }) => {\r\n\tconst deleteHandler = () => {\r\n\t\tsetTodos(todos.filter((el) => el.id !== todo.id));\r\n\t};\r\n\tconst completeHandler = () => {\r\n\t\tsetTodos(\r\n\t\t\ttodos.map((item) => {\r\n\t\t\t\tif (item.id === todo.id) {\r\n\t\t\t\t\treturn { ...item, completed: !item.completed };\r\n\t\t\t\t}\r\n\t\t\t\treturn item;\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='todo'>\r\n\t\t\t<li className={`todo-item ${todo.completed ? 'completed' : ''}`}>\r\n\t\t\t\t{todo.text}\r\n\t\t\t</li>\r\n\t\t\t<button onClick={completeHandler} className='complete-btn'>\r\n\t\t\t\t<i className='fas fa-check'></i>\r\n\t\t\t</button>\r\n\t\t\t<button onClick={deleteHandler} className='trash-btn'>\r\n\t\t\t\t<i className='fas fa-trash'></i>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\n\r\n//import components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n\treturn (\r\n\t\t<div className='todo-container'>\r\n\t\t\t<ul className='todo-list'>\r\n\t\t\t\t{filteredTodos.map((todo) => (\r\n\t\t\t\t\t<Todo key={todo.id} todo={todo} todos={todos} setTodos={setTodos} />\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\n\r\nconst Toast = ({ toast }) => {\r\n\treturn (\r\n\t\t<div className={`${toast.visibility}`}>\r\n\t\t\t<i className='fas fa-exclamation-triangle'></i>\r\n\t\t\t{toast.message}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Toast;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n//importing components\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\nimport Toast from './components/Toast';\n\nfunction App() {\n\t//useState\n\tconst [inputText, setInputText] = useState('');\n\tconst [todos, setTodos] = useState([]);\n\tconst [filter, setFilter] = useState('all');\n\tconst [filteredTodos, setFilteredTodos] = useState([]);\n\tconst [toast, setToast] = useState({\n\t\tmessage: '',\n\t\tduration: '',\n\t\tvisibility: 'hidden-toast',\n\t});\n\n\t//useEffect\n\tuseEffect(() => {\n\t\tgetLocalTodos();\n\t}, []);\n\tuseEffect(() => {\n\t\tfilterHandler();\n\t\tsaveLocalTodos();\n\t}, [todos, filter]);\n\n\t//functions\n\tconst showToast = (message, duration) => {\n\t\tif (toast.visibility === 'hidden-toast') {\n\t\t\tsetToast({\n\t\t\t\tmessage: message,\n\t\t\t\tduration: duration,\n\t\t\t\tvisibility: 'visible-toast',\n\t\t\t});\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetToast({\n\t\t\t\t\tmessage: message,\n\t\t\t\t\tduration: duration,\n\t\t\t\t\tvisibility: 'hidden-toast',\n\t\t\t\t});\n\t\t\t}, duration);\n\t\t}\n\t};\n\tconst filterHandler = () => {\n\t\tswitch (filter) {\n\t\t\tcase 'completed':\n\t\t\t\tsetFilteredTodos(todos.filter((todo) => todo.completed === true));\n\t\t\t\tbreak;\n\t\t\tcase 'uncompleted':\n\t\t\t\tsetFilteredTodos(todos.filter((todo) => todo.completed === false));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsetFilteredTodos(todos);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\tconst saveLocalTodos = () => {\n\t\tlocalStorage.setItem('todos', JSON.stringify(todos));\n\t};\n\tconst getLocalTodos = () => {\n\t\tif (localStorage.getItem('todos') === null) {\n\t\t\tlocalStorage.setItem('todos', JSON.stringify([]));\n\t\t} else {\n\t\t\tlet localTodos = JSON.parse(localStorage.getItem('todos'));\n\t\t\tsetTodos(localTodos);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Toast toast={toast} />\n\t\t\t<header>\n\t\t\t\t<h1>Lista de Tareas</h1>\n\t\t\t</header>\n\t\t\t<Form\n\t\t\t\tinputText={inputText}\n\t\t\t\tsetInputText={setInputText}\n\t\t\t\ttodos={todos}\n\t\t\t\tsetTodos={setTodos}\n\t\t\t\tsetFilter={setFilter}\n\t\t\t\tshowToast={showToast}\n\t\t\t/>\n\t\t\t<TodoList\n\t\t\t\ttodos={todos}\n\t\t\t\tsetTodos={setTodos}\n\t\t\t\tfilteredTodos={filteredTodos}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}